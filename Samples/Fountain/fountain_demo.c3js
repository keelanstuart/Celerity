var runtime;

var Vec2I = { x: 0, y: 0 };
var Vec3I = { x: 0, y: 0, z: 0 };
var Vec4I = { x: 0, y: 0, z: 0, w: 0 };

var Vec2F = { x: 0.0, y: 0.0 };
var Vec3F = { x: 0.0, y: 0.0, z: 0.0 };
var Vec4F = { x: 0.0, y: 0.0, z: 0.0, w: 0.0 };

var Facing = { forward: -1, right: -1, up: -1 };
var hfacing = new Facing();

var hroot;
var hparent;
var hcamroot;
var hcamarm;
var hcam;

var tmpv3 = new Vec3F();
var tmpv4 = new Vec4F();

var hpos_camroot;
var hori_camroot;
var hori_camarm;
var hori_cam;

var pos_camroot = new Vec3F();
var ori_camroot = new Vec3F();
var ori_camarm = new Vec3F();
var ori_cam = new Vec3F();

var hlvel_camroot;

var hbgcolor;

var move_accum = new Vec3F();
var turn_speed = 5.0;
var move_speed = 0.0;
var walk_speed = 10.0;
var run_mult = 1.5;
var jump_vel = 50.0;
var run = false;
var player_height = 8.0;
var collision_info;

var load_result;

function init()
{
	runtime = 0.0;

	load_result = LoadObject(self, "floating_fountain.c3o");

	hcamroot = GetRegisteredObject("camera.root");
	hcamarm = GetRegisteredObject("camera.arm");
	hcam = GetRegisteredObject("camera");

	if (load_result.success == 1)
	{
		Log("Floating fountain scene loaded!\n");

		DeleteObject(hcam);
		hcam = load_result.camera;
		SetParent(hcam, hcamarm);
		RegisterObject("camera", hcam);
	}

	hfacing.forward = FindProperty(hcamroot, "Facing.Forward");
	hfacing.right = FindProperty(hcam, "Facing.Right");
	hfacing.up = FindProperty(self, "Facing.Up");

	hpos_camroot = FindProperty(hcamroot, "Position");
	hori_camroot = FindProperty(hcamroot, "Orientation");
	hori_camarm = FindProperty(hcamarm, "Orientation");
	hori_cam = FindProperty(hcam, "Orientation");

	hlvel_camroot = FindProperty(hcamroot, "LinearVelocity");
	
	hroot = GetRegisteredObject("worldroot");
	hbgcolor = FindProperty(hroot, "uBackgroundColor");

	collision_info = CreateCollisionResults();
}

function update(elapsed_seconds)
{
	runtime += elapsed_seconds;

	pos_camroot = GetPropertyValue(hpos_camroot);

	// check for floor collisions and correct
	if (pos_camroot.z <= player_height)
	{
		pos_camroot.z = player_height;
		SetPropertyValue(hpos_camroot, pos_camroot);

		// reset down velocity
		if (move_accum.z < 0.0)
			move_accum.z = 0.0;
	}

	//collision_info = CheckCollisions(hroot, pos_camroot, move_accum);
	if (collision_info.found != 0)
	{
		move_speed = walk_speed;
		if (run)
			move_speed *= run_mult;

		move_accum.x *= move_speed;
		move_accum.y *= move_speed;
		SetPropertyValue(hlvel_camroot, move_accum);
	}

	move_accum.x = 0.0;
	move_accum.y = 0.0;
	move_accum.z = 0.0;
	run = false;

	tmpv3.x = ((Math.sin(runtime / 1.0) / 4.0) + 0.25) * 255;
	tmpv3.y = ((Math.sin(runtime / 2.0) / 2.0) + 0.5) * 255;
	tmpv3.z = ((Math.sin(runtime / 3.0) / 2.0) + 0.5) * 255;
	SetPropertyValue(hbgcolor, tmpv3);
}

function handle_input(action, value)
{
	ori_camroot = GetPropertyValue(hori_camroot);

	if (action == "Move Forward")
	{
		tmpv3 = GetPropertyValue(hfacing.forward);
	}
	else if (action == "Move Backward")
	{
		tmpv3 = GetPropertyValue(hfacing.forward);
		tmpv3.x *= -1.0;
		tmpv3.y *= -1.0;
	}
	else if (action == "Strafe Left")
	{
		tmpv3 = GetPropertyValue(hfacing.right);
		tmpv3.x *= -1.0;
		tmpv3.y *= -1.0;
		tmpv3.z = 0.0;
	}
	else if (action == "Strafe Right")
	{
		tmpv3 = GetPropertyValue(hfacing.right);
		tmpv3.z = 0.0;
	}
	else if (action == "Look Down")
	{
		ori_camroot.x -= Math.toRadians(value * turn_speed);
	}
	else if (action == "Look Up")
	{
		ori_camroot.x += Math.toRadians(value * turn_speed);
	}
	else if (action == "Look Left")
	{
		ori_camroot.z -= Math.toRadians(value * turn_speed);
	}
	else if (action == "Look Right")
	{
		ori_camroot.z += Math.toRadians(value * turn_speed);
	}
	else if (action == "Jump")
	{
		tmpv3.z = jump_vel;
	}
	else if (action == "Run")
	{
		run = true;
	}
	else if (action == "Fire 1")
	{
	}
	else if (action == "Fire 2")
	{
	}

	SetPropertyValue(hori_camroot, ori_camroot);

	// accumulate movement because we might get multiple move
	// events in a single frame that are processed separately
	// reset at the end of update
	move_accum.x += tmpv3.x;
	move_accum.y += tmpv3.y;
	move_accum.z += tmpv3.z;
}
