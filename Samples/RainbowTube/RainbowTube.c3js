var runtime = 0.0;
var color_time = 0.0;
var sp1_time = 0.0;
var sp2_time = 0.0;
var sp3_time = 0.0;
var root_time = 0.0;

var hobj_em1, hobj_em2, hobj_em3, hobj_em4, hobj_em5, hobj_em6;
var hobj_sp1, hobj_sp2, hobj_sp3;

var hprop_em1_clrs, hprop_em1_clrp, hprop_em1_clre, hprop_em1_peak; 
var hprop_em2_clrs, hprop_em2_clrp, hprop_em2_clre, hprop_em2_peak; 
var hprop_em3_clrs, hprop_em3_clrp, hprop_em3_clre, hprop_em3_peak; 
var hprop_em4_clrs, hprop_em4_clrp, hprop_em4_clre, hprop_em4_peak; 
var hprop_em5_clrs, hprop_em5_clrp, hprop_em5_clre, hprop_em5_peak; 
var hprop_em6_clrs, hprop_em6_clrp, hprop_em6_clre, hprop_em6_peak; 

var em1_clrs = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em1_clrp = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em1_clre = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em2_clrs = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em2_clrp = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em2_clre = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em3_clrs = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em3_clrp = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em3_clre = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em4_clrs = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em4_clrp = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em4_clre = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em5_clrs = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em5_clrp = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em5_clre = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em6_clrs = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em6_clrp = { r:0.0, g:0.0, b:0.0, a:1.0 };
var em6_clre = { r:0.0, g:0.0, b:0.0, a:1.0 };

var clr = { r:0.0, g:0.0, b:0.0, a:1.0 };
var p;
var f;

var hprop_root_racc, hprop_sp1_racc, hprop_sp2_racc, hprop_sp3_racc;
var root_racc = { x:0.0, y:0.0, z:0.0 };
var sp1_racc = { x:0.0, y:0.0, z:0.0 };
var sp2_racc = { x:0.0, y:0.0, z:0.0 };
var sp3_racc = { x:0.0, y:0.0, z:0.0 };


function init()
{
	hobj_em1 = FindFirstObjByName(self, "EMITTER1", 1);
	hobj_em2 = FindFirstObjByName(self, "EMITTER2", 1);
	hobj_em3 = FindFirstObjByName(self, "EMITTER3", 1);
	hobj_em4 = FindFirstObjByName(self, "EMITTER4", 1);
	hobj_em5 = FindFirstObjByName(self, "EMITTER5", 1);
	hobj_em6 = FindFirstObjByName(self, "EMITTER6", 1);

	hobj_sp1 = FindFirstObjByName(self, "SPAR1", 1);
	hobj_sp2 = FindFirstObjByName(self, "SPAR2", 1);
	hobj_sp3 = FindFirstObjByName(self, "SPAR3", 1);

	hprop_em1_clrs = FindProperty(hobj_em1, "StartColor");
	hprop_em1_clrp = FindProperty(hobj_em1, "PeakColor");
	hprop_em1_clre = FindProperty(hobj_em1, "EndColor");
	hprop_em1_peak = FindProperty(hobj_em1, "Peak");

	hprop_em2_clrs = FindProperty(hobj_em2, "StartColor");
	hprop_em2_clrp = FindProperty(hobj_em2, "PeakColor");
	hprop_em2_clre = FindProperty(hobj_em2, "EndColor");
	hprop_em2_peak = FindProperty(hobj_em2, "Peak");

	hprop_em3_clrs = FindProperty(hobj_em3, "StartColor");
	hprop_em3_clrp = FindProperty(hobj_em3, "PeakColor");
	hprop_em3_clre = FindProperty(hobj_em3, "EndColor");
	hprop_em3_peak = FindProperty(hobj_em3, "Peak");

	hprop_em4_clrs = FindProperty(hobj_em4, "StartColor");
	hprop_em4_clrp = FindProperty(hobj_em4, "PeakColor");
	hprop_em4_clre = FindProperty(hobj_em4, "EndColor");
	hprop_em4_peak = FindProperty(hobj_em4, "Peak");

	hprop_em5_clrs = FindProperty(hobj_em5, "StartColor");
	hprop_em5_clrp = FindProperty(hobj_em5, "PeakColor");
	hprop_em5_clre = FindProperty(hobj_em5, "EndColor");
	hprop_em5_peak = FindProperty(hobj_em5, "Peak");

	hprop_em6_clrs = FindProperty(hobj_em6, "StartColor");
	hprop_em6_clrp = FindProperty(hobj_em6, "PeakColor");
	hprop_em6_clre = FindProperty(hobj_em6, "EndColor");
	hprop_em6_peak = FindProperty(hobj_em6, "Peak");

	hprop_root_racc = FindProperty(self, "RotationalAcceleration");
	hprop_sp1_racc = FindProperty(hobj_sp1, "RotationalAcceleration");
	hprop_sp2_racc = FindProperty(hobj_sp2, "RotationalAcceleration");
	hprop_sp3_racc = FindProperty(hobj_sp3, "RotationalAcceleration");

	hrvel = FindProperty(self, "Rotational");
	hori = FindProperty(self, "Orientation");
	
	hori_or = FindProperty(hobj_or, "Orientation");
	hori_ol = FindProperty(hobj_ol, "Orientation");
}

function update(elapsed_seconds)
{
	runtime += elapsed_seconds;

	if (color_time <= 0.0)
	{
		Log("Color timer expired\n");

		color_time = Math.random(15, 60);

		em1_clrs.r = Math.random(1, 16) / 255.0;
		em1_clrs.g = Math.random(1, 16) / 255.0;
		em1_clrs.b = Math.random(1, 16) / 255.0;

		em2_clrs.r = Math.random(1, 16) / 255.0;
		em2_clrs.g = Math.random(1, 16) / 255.0;
		em2_clrs.b = Math.random(1, 16) / 255.0;

		em3_clrs.r = Math.random(1, 16) / 255.0;
		em3_clrs.g = Math.random(1, 16) / 255.0;
		em3_clrs.b = Math.random(1, 16) / 255.0;

		em4_clrs.r = Math.random(1, 16) / 255.0;
		em4_clrs.g = Math.random(1, 16) / 255.0;
		em4_clrs.b = Math.random(1, 16) / 255.0;

		em5_clrs.r = Math.random(1, 16) / 255.0;
		em5_clrs.g = Math.random(1, 16) / 255.0;
		em5_clrs.b = Math.random(1, 16) / 255.0;

		em6_clrs.r = Math.random(1, 16) / 255.0;
		em6_clrs.g = Math.random(1, 16) / 255.0;
		em6_clrs.b = Math.random(1, 16) / 255.0;

		em1_clrp.r = Math.random(1, 16) / 255.0;
		em1_clrp.g = Math.random(1, 16) / 255.0;
		em1_clrp.b = Math.random(1, 16) / 255.0;

		em2_clrp.r = Math.random(1, 16) / 255.0;
		em2_clrp.g = Math.random(1, 16) / 255.0;
		em2_clrp.b = Math.random(1, 16) / 255.0;

		em3_clrp.r = Math.random(1, 16) / 255.0;
		em3_clrp.g = Math.random(1, 16) / 255.0;
		em3_clrp.b = Math.random(1, 16) / 255.0;

		em4_clrp.r = Math.random(1, 16) / 255.0;
		em4_clrp.g = Math.random(1, 16) / 255.0;
		em4_clrp.b = Math.random(1, 16) / 255.0;

		em5_clrp.r = Math.random(1, 16) / 255.0;
		em5_clrp.g = Math.random(1, 16) / 255.0;
		em5_clrp.b = Math.random(1, 16) / 255.0;

		em6_clrp.r = Math.random(1, 16) / 255.0;
		em6_clrp.g = Math.random(1, 16) / 255.0;
		em6_clrp.b = Math.random(1, 16) / 255.0;

		em1_clre.r = Math.random(1, 16) / 255.0;
		em1_clre.g = Math.random(1, 16) / 255.0;
		em1_clre.b = Math.random(1, 16) / 255.0;

		em2_clre.r = Math.random(1, 16) / 255.0;
		em2_clre.g = Math.random(1, 16) / 255.0;
		em2_clre.b = Math.random(1, 16) / 255.0;

		em3_clre.r = Math.random(1, 16) / 255.0;
		em3_clre.g = Math.random(1, 16) / 255.0;
		em3_clre.b = Math.random(1, 16) / 255.0;

		em4_clre.r = Math.random(1, 16) / 255.0;
		em4_clre.g = Math.random(1, 16) / 255.0;
		em4_clre.b = Math.random(1, 16) / 255.0;

		em5_clre.r = Math.random(1, 16) / 255.0;
		em5_clre.g = Math.random(1, 16) / 255.0;
		em5_clre.b = Math.random(1, 16) / 255.0;

		em6_clre.r = Math.random(1, 16) / 255.0;
		em6_clre.g = Math.random(1, 16) / 255.0;
		em6_clre.b = Math.random(1, 16) / 255.0;
	}
	color_time -= elapsed_seconds;

	if (sp1_time <= 0.0)
	{
		Log("Spar1 timer expired\n");

		sp1_time = Math.random(15, 30);
		//sp1_racc.x = Math.toRadians(Math.random(-20.0, 20.0));
		sp1_racc.y = Math.toRadians(Math.random(-20.0, 20.0));
		//sp1_racc.z = Math.toRadians(Math.random(-20.0, 20.0));
		SetPropertyValue(hprop_sp1_racc, sp1_racc);
	}
	sp1_time -= elapsed_seconds;

	if (sp2_time <= 0.0)
	{
		Log("Spar2 timer expired\n");

		sp2_time = Math.random(15, 30);
		//sp2_racc.x = Math.toRadians(Math.random(-20.0, 20.0));
		sp2_racc.y = Math.toRadians(Math.random(-20.0, 20.0));
		//sp2_racc.z = Math.toRadians(Math.random(-20.0, 20.0));
		SetPropertyValue(hprop_sp2_racc, sp2_racc);
	}
	sp2_time -= elapsed_seconds;

	if (sp3_time <= 0.0)
	{
		Log("Spar3 timer expired\n");

		sp3_time = Math.random(15, 30);
		//sp3_racc.x = Math.toRadians(Math.random(-20.0, 20.0));
		sp3_racc.y = Math.toRadians(Math.random(-20.0, 20.0));
		//sp3_racc.z = Math.toRadians(Math.random(-20.0, 20.0));
		SetPropertyValue(hprop_sp3_racc, sp3_racc);
	}
	sp3_time -= elapsed_seconds;

	if (root_time <= 0.0)
	{
		Log("Root timer expired\n");

		root_time = Math.random(30, 60);
		root_racc.x = Math.toRadians(Math.random(-30.0, 30.0));
		root_racc.y = Math.toRadians(Math.random(-30.0, 30.0));
		root_racc.z = Math.toRadians(Math.random(-30.0, 30.0));
		SetPropertyValue(hprop_root_racc, root_racc);
	}
	root_time -= elapsed_seconds;

	f = Math.sin(runtime / 10.0) / 10.0 + 0.5;
	SetPropertyValue(hprop_em1_peak, f);
	SetPropertyValue(hprop_em3_peak, f);
	SetPropertyValue(hprop_em5_peak, f);

	f = Math.cos(runtime / 10.0) / 10.0 + 0.5;
	SetPropertyValue(hprop_em2_peak, f);
	SetPropertyValue(hprop_em4_peak, f);
	SetPropertyValue(hprop_em6_peak, f);

	// interpolate colors
	p = GetPropertyValue(hprop_em1_clrs);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em1_clrs, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em1_clrs, p);

	p = GetPropertyValue(hprop_em1_clrp);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em1_clrp, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em1_clrp, p);

	p = GetPropertyValue(hprop_em1_clre);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em1_clre, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em1_clre, p);

	p = GetPropertyValue(hprop_em2_clrs);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em2_clrs, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em2_clrs, p);

	p = GetPropertyValue(hprop_em2_clrp);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em2_clrp, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em2_clrp, p);

	p = GetPropertyValue(hprop_em2_clre);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em2_clre, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em2_clre, p);

	p = GetPropertyValue(hprop_em3_clrs);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em3_clrs, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em3_clrs, p);

	p = GetPropertyValue(hprop_em3_clrp);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em3_clrp, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em3_clrp, p);

	p = GetPropertyValue(hprop_em3_clre);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em3_clre, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em3_clre, p);

	p = GetPropertyValue(hprop_em4_clrs);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em4_clrs, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em4_clrs, p);

	p = GetPropertyValue(hprop_em4_clrp);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em4_clrp, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em4_clrp, p);

	p = GetPropertyValue(hprop_em4_clre);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em4_clre, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em4_clre, p);

	p = GetPropertyValue(hprop_em5_clrs);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em5_clrs, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em5_clrs, p);

	p = GetPropertyValue(hprop_em5_clrp);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em5_clrp, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em5_clrp, p);

	p = GetPropertyValue(hprop_em5_clre);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em5_clre, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em5_clre, p);

	p = GetPropertyValue(hprop_em6_clrs);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em6_clrs, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em6_clrs, p);

	p = GetPropertyValue(hprop_em6_clrp);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em6_clrp, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em6_clrp, p);

	p = GetPropertyValue(hprop_em6_clre);
	clr = UnpackColorToFloatVec(p);
	clr = Math.lerp(clr, em6_clre, 0.1);
	p = PackColorFromFloatVec(clr);
	SetPropertyValue(hprop_em6_clre, p);
}
