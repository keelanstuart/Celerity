var Vec2I = { x: 0, y: 0 };
var Vec3I = { x: 0, y: 0, z: 0 };
var Vec4I = { x: 0, y: 0, z: 0, w: 0 };

var Vec2F = { x: 0.0, y: 0.0 };
var Vec3F = { x: 0.0, y: 0.0, z: 0.0 };
var Vec4F = { x: 0.0, y: 0.0, z: 0.0, w: 0.0 };

var Facing = { forward: -1, right: -1, up: -1 };

var runtime;
var hparent;
var hfacing = new Facing();

var hpos;
var hori;

var pos = new Vec3F();
var ori = new Vec3F();

var move_accum = new Vec3F();
var tmpv3 = new Vec3F();
var tmp = 0.0;

var hlvel;

var turn_speed = 5.0;
var move_speed = 0.0;
var walk_speed = 10.0;
var run_mult = 1.5;
var jump_vel = 50.0;
var run = false;
var player_height = 8.0;
var collision_info;
var down_vec = new Vec3F();

var hbullet;
var bullet_idx;

function update(elapsed_seconds)
{
	runtime += elapsed_seconds;

	hparent = GetParent(self);
	pos = GetPropertyValue(hpos);
	down_vec.z = -player_height;

	collision_info = CheckCollisions(parent pos, down_vec);
	if (collision_info.found != 0)
	{
		// check for floor collisions and correct - reuse down_vec.z
		down_vec.z += collision_info.dist;
		if (down_vec.z <= 0)
		{
			pos.z -= down_vec.z;
			SetPropertyValue(hpos, pos);

			// reset down velocity
			if (move_accum.z < 0.0)
				move_accum.z = 0.0;
		}

		move_speed = walk_speed;
		if (run)
			move_speed *= run_mult;

		move_accum.x *= move_speed;
		move_accum.y *= move_speed;
		SetPropertyValue(hlvel, move_accum);
	}

	move_accum.x = 0.0;
	move_accum.y = 0.0;
	move_accum.z = 0.0;
	run = false;
}

function fire_cannon()
{
	var hbpos = FindProperty(hbullet[bullet_idx], "Position");
	SetPropertyValue(hbpos, GetPropertyValue(hpos));

	tmpv3 = GetPropertyValue(hfacing.forward);
	tmp = speed + (max_speed * speed_boost) + 120.0;
	tmpv3.x = tmpv3.x * tmp;
	tmpv3.y = tmpv3.y * tmp;
	tmpv3.z = tmpv3.z * tmp;
	var hblvel = FindProperty(hbullet[bullet_idx], "LinearVelocity");
	SetPropertyValue(hblvel, tmpv3);

	bullet_idx = (bullet_idx + 1) % 500;
}

function handle_input(action, value)
{
	ori = GetPropertyValue(hori);

	if (action == "Move Forward")
	{
		tmpv3 = GetPropertyValue(hfacing.forward);
	}
	else if (action == "Move Backward")
	{
		tmpv3 = GetPropertyValue(hfacing.forward);
		tmpv3.x *= -1.0;
		tmpv3.y *= -1.0;
	}
	else if (action == "Strafe Left")
	{
		tmpv3 = GetPropertyValue(hfacing.right);
		tmpv3.x *= -1.0;
		tmpv3.y *= -1.0;
	}
	else if (action == "Strafe Right")
	{
		tmpv3 = GetPropertyValue(hfacing.right);
	}
	else if (action == "Look Down")
	{
		ori.x -= Math.toRadians(value * turn_speed);
	}
	else if (action == "Look Up")
	{
		ori.x += Math.toRadians(value * turn_speed);
	}
	else if (action == "Look Left")
	{
		ori.z -= Math.toRadians(value * turn_speed);
	}
	else if (action == "Look Right")
	{
		ori.z += Math.toRadians(value * turn_speed);
	}
	else if (action == "Jump")
	{
		tmpv3.z = jump_vel;
	}
	else if (action == "Run")
	{
		run = true;
	}
	else if (action == "Fire 1")
	{
	}
	else if (action == "Fire 2")
	{
	}

	SetPropertyValue(hori, ori);

	// accumulate movement because we might get multiple move
	// events in a single frame that are processed separately
	// reset at the end of update
	move_accum.x += tmpv3.x;
	move_accum.y += tmpv3.y;
	move_accum.z += tmpv3.z;
}

function respawn()
{
	var hspawn = FindFirstObjByName(hparent, "SPAWN1", true);
	var hspawnpos = FindProperty(hspawn, "Position");
	var spawnpos = GetPropertyValue(hspawnpos);
	SetPropertyValue(hpos, spawnpos);
}

function init()
{
	runtime = 0.0;

	// cache property handles now so value access is cheaper later
	hpos = FindProperty(self, "Position");
	hori = FindProperty(self, "Orientation");
	hfacing.forward = FindProperty(self, "Facing.Forward");
	hfacing.right = FindProperty(self, "Facing.Right");
	hfacing.up = FindProperty(self, "Facing.Up");
	hlvel = FindProperty(self, "LinearVelocity");
	hparent = GetParent(self);

	collision_info = CreateCollisionResults();
	down_vec.x = 0.0;
	down_vec.y = 0.0;
	down_vec.z = -1.0;

	// create projectiles up front to avoid run-time hitches
	_idx = 0;
	hbullet = new Array();
	var i;
	for (i = 0; i < 500; i++)
		hbullet[i] = CreateObject("Pellet", hparent);
}

function free()
{
	FreeCollisionResults(collision_info);
}
